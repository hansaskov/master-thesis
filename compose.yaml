services:
  caddy:
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - frontend_build:/build
      - caddy_data:/data
      - caddy_config:/config
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      caddy: "${INTERFACE_FQDN}"
      caddy.encode: zstd gzip
      caddy.handle.root: "* /build"
      caddy.handle.try_files: "{path} /200.html"
      caddy.handle.file_server:

  ## The frontend service will build the frontend and then store the build output in volume bind
  frontend: 
    build:
      context: services/frontend
      dockerfile: Dockerfile
    volumes:
      - frontend_build:/app/build

  ## The Backend-server will host our REST JSON api. Our spa will use this
  backend-server:
    build:
      context: services/backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/${POSTGRES_DB}
    labels:
      caddy: "${INTERFACE_FQDN}"
      caddy.handle: /api/*
      caddy.handle.reverse_proxy: "{{upstreams 3000}}"
    depends_on:
      - timescaledb

  ingest-server:
    build:
      context: services/ingestion
      dockerfile: Dockerfile
    ports:
      - "50051:50051"
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/${POSTGRES_DB}
    labels:
      caddy: "${INGEST_SERVER_FQDN}"
      caddy.reverse_proxy: "{{upstreams 50051}}"
    depends_on:
      - timescaledb

  timescaledb:
    image: timescale/timescaledb:latest-pg16
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - timescaledb_data:/var/lib/postgresql/data

## Deployment Services

volumes:
  caddy_data:
  caddy_config:
  frontend_build:
  timescaledb_data:
