name: Build and test images

on: [push]

permissions:
  packages: write
  contents: read
  id-token: write

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: hansaskov/master-thesis-frontend
  BACKEND_IMAGE_NAME: hansaskov/master-thesis-backend
  PROD: false
  IMAGE_TAG: 1.0

jobs:
  build_frontend_docker_image:
    runs-on: ubuntu-latest
    needs: build_backend_docker_image
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Generate Cosign Key Pair
        run: |
          cosign generate-key-pair
          cat cosign.key  # This will show the private key in the correct format
        env:
          COSIGN_PASSWORD: ""
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226
        
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAG }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: ./services/frontend/dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
        
  build_backend_docker_image:
    runs-on: ubuntu-latest
    env: 
      DATABASE_URL: postgresql://myuser:password@localhost:5432/mydatabase
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - name: Install package
        working-directory: ./services/backend
        run: bun install
      - name: Start TimescaleDB
        run: docker run -d --name timescaledb -p 5432:5432 -e POSTGRES_PASSWORD=password -e POSTGRES_USER=myuser -e POSTGRES_DB=mydatabase timescale/timescaledb:latest-pg17
      - name: Wait 10 seconds
        run: sleep 10
      - name: List Containers
        run: docker container list
      - name: Start migrate
        working-directory: ./services/backend
        run: bun db:migrate 
      - name: Run backend tests  
        working-directory: ./services/backend
        run: bun test

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Generate Cosign Key Pair
        run: |
          cosign generate-key-pair
          cat cosign.key  # This will show the private key in the correct format
        env:
          COSIGN_PASSWORD: ""
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226
        
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAG }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: ./services/backend/dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
        
  deploy-services:
    runs-on: ubuntu-latest
    environment: preview
    env:
      DOCKER_HOST: ssh://admin@${{ secrets.SERVER_IP }}
      COMPOSE_PROFILES: stateless, stateful, migrate
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      INTERFACE_FQDN: ${{ vars.INTERFACE_FQDN }}
      MICROSOFT_REDIRECT_URI: ${{ vars.MICROSOFT_REDIRECT_URI }}

      MICROSOFT_TENANT_ID: ${{ secrets.MICROSOFT_TENANT_ID }}
      MICROSOFT_CLIENT_ID: ${{ secrets.MICROSOFT_CLIENT_ID }}
      MICROSOFT_CLIENT_SECRET: ${{ secrets.MICROSOFT_CLIENT_SECRET }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_USER }}

      DATABASE_URL: postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_USER }}@timescaledb:5432/${{ vars.POSTGRES_DB }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host *\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Deploy caddy
        run: docker compose --profile proxy -p proxy up -d
      - name: Debug POSTGRES_DB secrets
        run: echo "$POSTGRES_DB"
      - name: Debug POSTGRES_USER secrets
        run: echo "$POSTGRES_USER"
      - name: Deploy docker compose
        run: docker compose -f compose.yaml --profile stateful --profile stateless --profile migrate  up --build  -d
        env:
          COMPOSE_PROJECT_NAME: thesis-preview


