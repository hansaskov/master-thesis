services:
  timescaledb:
    image: timescale/timescaledb-ha:pg17.4-ts2.19.3
    restart: unless-stopped
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - PGDATA
      - PGBACKREST_STANZA=poddb
      - PGBACKREST_CONFIG=${BACKUPROOT}/pgbackrest.conf
      - PGBACKREST_REPO1_TYPE=s3
      - PGBACKREST_REPO1_PATH=/backup
      - PGBACKREST_REPO1_S3_BUCKET=${S3_BUCKET}
      - PGBACKREST_REPO1_S3_ENDPOINT=${S3_ENDPOINT}
      - PGBACKREST_REPO1_S3_KEY=${S3_ACCESS_KEY_ID}
      - PGBACKREST_REPO1_S3_KEY_SECRET=${S3_SECRET_ACCESS_KEY}
      - PGBACKREST_REPO1_S3_REGION=${S3_REGION}
      - PGBACKREST_PG1_DATABASE=${POSTGRES_DB}
      - PGBACKREST_PG1_USER=${POSTGRES_USER}
      - PGBACKREST_PG1_PATH=${PGDATA}
      - PGBACKREST_PG1_SOCKET_PATH=${PGSOCKET}
    volumes:
      - timescaledb-data:${PGDATA}
      - ./init/:/docker-entrypoint-initdb.d/
      - ./pgbackrest/pgbackrest.conf:${BACKUPROOT}/pgbackrest.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  timescaledb-data:
