services:
  ## The frontend service will build the frontend and then serve the files using caddy.
  frontend: 
    profiles: [stateless]
    build: services/frontend
    networks:
      - proxy_network
    labels:
      caddy: "${INTERFACE_FQDN}"
      caddy.encode: zstd gzip
      caddy.reverse_proxy: "{{upstreams 8080}}"

  ## The Backend will host our REST JSON api. Our spa will use this for data communication.
  backend: 
    profiles: [stateless]
    build: services/backend
    networks:
      - proxy_network
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - MICROSOFT_TENANT_ID=${MICROSOFT_TENANT_ID}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      - MICROSOFT_REDIRECT_URI=${MICROSOFT_REDIRECT_URI}
      - PROD=${PROD}
    labels:
      caddy: "${INTERFACE_FQDN}"
      caddy.handle: /api/*
      caddy.handle.reverse_proxy: "{{upstreams 3000}}"

  ## A postgres database optimised for timeseries data
  timescaledb:
    profiles: [stateful]    
    image: timescale/timescaledb:latest-pg17
    restart: always
    networks:
      - proxy_network
    ports: 
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  ## Production insights
  dozzle:
    profiles: [prod]   
    image: amir20/dozzle:latest
    networks:
      - proxy_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      caddy: "${DOZZLE_FQDN}"
      caddy.reverse_proxy: "{{upstreams 8080}}"

volumes:
  timescaledb-data:

networks:
  proxy_network:
    external: true